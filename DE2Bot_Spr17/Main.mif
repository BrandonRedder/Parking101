-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 284D;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 09B9;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00A : 81A1;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 8183;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 49C8;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 49C5;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 49C5;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 11B7;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 51B7;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 49C6;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 09B9;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : 90D1;  -- 	IN		IR_LO					;Read in IR Second Word
           022 : 4021;  -- 	JZERO	Main					;If zero, no new value, check again
           023 : 17D0;  -- 	STORE	IR_Current_Val			;Else, store new value and start down tree
           024 : 8040;  -- 	Call Reset_IR					;Reset IR to not read same value twice
           025 : 0FD0;  -- 	LOAD	IR_Current_Val			
           026 : 27D1;  -- 	SUB		IR_Power				;Check if power button (E-Stop)
           027 : 4044;  -- 	JZERO	Die
           028 : 27D2;  -- 	SUB		IR_1
           029 : 27D3;  -- 	SUB		IR_Play					;Check if it is pause button (Stop motion)
           02A : 403B;  -- 	JZERO	Pause_Motion
           02B : 27D4;  -- 	SUB		IR_5
           02C : 27D5;  -- 	SUB		IR_9
           02D : 27D6;  -- 	SUB		IR_Enter
           02E : 27D7;  -- 	SUB		IR_VolUp
           02F : 27D8;  -- 	SUB		IR_RW
           030 : 27D9;  -- 	SUB		IR_3
           031 : 27DA;  -- 	SUB		IR_7
           032 : 27DB;  -- 	SUB		IR_Pause
           033 : 27DC;  -- 	SUB		IR_2
           034 : 27DD;  -- 	SUB		IR_6
           035 : 27DE;  -- 	SUB		IR_0
           036 : 27DF;  -- 	SUB		IR_VolDwn
           037 : 27E0;  -- 	SUB		IR_FF
           038 : 27E1;  -- 	SUB		IR_4
           039 : 27E2;  -- 	SUB		IR_8
           03A : 27E3;  -- 	SUB		IR_TV_VCR
           03B : 09B9;  -- 	LOAD	Zero
           03C : 1050;  -- 	STORE	DVel
           03D : 90C2;  -- 	IN		THETA
           03E : 104F;  -- 	STORE	DTHETA
           03F : 2821;  -- 	JUMP	Main
           040 : 09B9;  -- 	LOAD	Zero
           041 : 98D0;  -- 	OUT		IR_HI
           042 : 98D1;  -- 	OUT		IR_LO
           043 : 8800;  -- 	RETURN
           044 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           045 : 09B9;  -- 	LOAD   Zero        ; Stop everything.
           046 : 9883;  -- 	OUT    LVELCMD
           047 : 988B;  -- 	OUT    RVELCMD
           048 : 98B2;  -- 	OUT    SONAREN
           049 : 084C;  -- 	LOAD   DEAD        ; An indication that we are dead
           04A : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the LEDs
           04B : 284B;  -- 	JUMP   Forever     ; Do this forever.
           04C : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           04D : 8051;  -- 	CALL   ControlMovement
           04E : B000;  -- 	RETI   ; return from ISR
           04F : 0000;  -- DTheta:    DW 0
           050 : 0000;  -- DVel:      DW 0
           051 : B832;  -- 	LOADI  50          ; used later to get a +/- constant
           052 : 107C;  -- 	STORE  MaxVal
           053 : 8069;  -- 	CALL   GetThetaErr ; get the heading error
           054 : 6002;  -- 	SHIFT  2
           055 : 1068;  -- 	STORE  CMAErr      ; hold temporarily
           056 : 6003;  -- 	SHIFT  3           ; multiply by another 4
           057 : 8070;  -- 	CALL   CapValue    ; get a +/- max of 50
           058 : 1868;  -- 	ADD    CMAErr
           059 : 1068;  -- 	STORE  CMAErr
           05A : B9FE;  -- 	LOADI  510
           05B : 107C;  -- 	STORE  MaxVal
           05C : 0850;  -- 	LOAD   DVel
           05D : 8070;  -- 	CALL   CapValue    ; ensure velocity is valid
           05E : 1050;  -- 	STORE  DVel        ; overwrite any invalid input
           05F : 1868;  -- 	ADD    CMAErr
           060 : 8070;  -- 	CALL   CapValue    ; ensure velocity is valid
           061 : 988B;  -- 	OUT    RVELCMD
           062 : 0868;  -- 	LOAD   CMAErr
           063 : 8084;  -- 	CALL   Neg         ; left wheel gets negative differential
           064 : 1850;  -- 	ADD    DVel
           065 : 8070;  -- 	CALL   CapValue
           066 : 9883;  -- 	OUT    LVELCMD
           067 : 8800;  -- 	RETURN
           068 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           069 : 90C2;  -- 	IN     THETA
           06A : 204F;  -- 	SUB    DTheta      ; actual - desired angle
           06B : 8084;  -- 	CALL   Neg         ; desired - actual angle
           06C : 68B4;  -- 	ADDI   180
           06D : 807D;  -- 	CALL   Mod360
           06E : 6F4C;  -- 	ADDI   -180
           06F : 8800;  -- 	RETURN
           070 : 207C;  -- 	SUB     MaxVal
           071 : 3877;  -- 	JPOS    CapVelHigh
           072 : 187C;  -- 	ADD     MaxVal
           073 : 187C;  -- 	ADD     MaxVal
           074 : 3079;  -- 	JNEG    CapVelLow
           075 : 207C;  -- 	SUB     MaxVal
           076 : 8800;  -- 	RETURN
           077 : 087C;  -- 	LOAD    MaxVal
           078 : 8800;  -- 	RETURN
           079 : 087C;  -- 	LOAD    MaxVal
           07A : 8084;  -- 	CALL    Neg
           07B : 8800;  -- 	RETURN
           07C : 01FE;  -- 	MaxVal: DW 510
           07D : 3080;  -- 	JNEG   M360N
           07E : 6E98;  -- 	ADDI   -360
           07F : 287D;  -- 	JUMP   Mod360
           080 : 6968;  -- 	ADDI   360
           081 : 3080;  -- 	JNEG   M360N
           082 : 8800;  -- 	RETURN
           083 : 3886;  -- 	JPOS   Abs_r
           084 : 59B8;  -- 	XOR    NegOne       ; Flip all bits
           085 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           086 : 8800;  -- 	RETURN
           087 : 08E7;  -- 	LOAD   AtanY
           088 : 8083;  -- 	CALL   Abs          ; abs(y)
           089 : 10E9;  -- 	STORE  AtanT
           08A : 08E6;  -- 	LOAD   AtanX        ; abs(x)
           08B : 8083;  -- 	CALL   Abs
           08C : 20E9;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           08D : 3098;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           08E : 08E6;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           08F : 3095;  -- 	JNEG   A2_R3
           090 : 80A7;  -- 	CALL   A2_calc      ; Octants 1, 8
           091 : 3093;  -- 	JNEG   A2_R1n
           092 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           093 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           094 : 8800;  -- 	RETURN
           095 : 80A7;  -- 	CALL   A2_calc      ; Octants 4, 5            
           096 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           097 : 8800;  -- 	RETURN
           098 : 08E7;  -- 	LOAD   AtanY        ; Swap input arguments
           099 : 10E9;  -- 	STORE  AtanT
           09A : 08E6;  -- 	LOAD   AtanX
           09B : 10E7;  -- 	STORE  AtanY
           09C : 08E9;  -- 	LOAD   AtanT
           09D : 10E6;  -- 	STORE  AtanX
           09E : 38A3;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           09F : 80A7;  -- 	CALL   A2_calc      ; else octants 6, 7
           0A0 : 8084;  -- 	CALL   Neg          ; Negatge the number
           0A1 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           0A2 : 8800;  -- 	RETURN
           0A3 : 80A7;  -- 	CALL   A2_calc      ; Octants 2, 3
           0A4 : 8084;  -- 	CALL   Neg          ; negate the angle
           0A5 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           0A6 : 8800;  -- 	RETURN
           0A7 : 08E7;  -- 	LOAD   AtanY
           0A8 : 1146;  -- 	STORE  d16sN        ; Y in numerator
           0A9 : 08E6;  -- 	LOAD   AtanX
           0AA : 1147;  -- 	STORE  d16sD        ; X in denominator
           0AB : 80D3;  -- 	CALL   A2_div       ; divide
           0AC : 094C;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0AD : 10E8;  -- 	STORE  AtanRatio
           0AE : 110F;  -- 	STORE  m16sA
           0AF : 1110;  -- 	STORE  m16sB
           0B0 : 80CA;  -- 	CALL   A2_mult      ; X^2
           0B1 : 110F;  -- 	STORE  m16sA
           0B2 : 08EA;  -- 	LOAD   A2c
           0B3 : 1110;  -- 	STORE  m16sB
           0B4 : 80CA;  -- 	CALL   A2_mult
           0B5 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           0B6 : 1147;  -- 	STORE  d16sD
           0B7 : 08E8;  -- 	LOAD   AtanRatio
           0B8 : 1146;  -- 	STORE  d16sN        ; Ratio in numerator
           0B9 : 80D3;  -- 	CALL   A2_div       ; divide
           0BA : 094C;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0BB : 110F;  -- 	STORE  m16sA        ; <= result in radians
           0BC : 08EB;  -- 	LOAD   A2cd         ; degree conversion factor
           0BD : 1110;  -- 	STORE  m16sB
           0BE : 80CA;  -- 	CALL   A2_mult      ; convert to degrees
           0BF : 10E9;  -- 	STORE  AtanT
           0C0 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           0C1 : 49BA;  -- 	AND    One
           0C2 : 40C7;  -- 	JZERO  A2_rdwn      ; round down
           0C3 : 08E9;  -- 	LOAD   AtanT
           0C4 : 6018;  -- 	SHIFT  -8
           0C5 : 6801;  -- 	ADDI   1            ; round up
           0C6 : 8800;  -- 	RETURN
           0C7 : 08E9;  -- 	LOAD   AtanT
           0C8 : 6018;  -- 	SHIFT  -8           ; round down
           0C9 : 8800;  -- 	RETURN
           0CA : 80EC;  -- 	CALL   Mult16s
           0CB : 0914;  -- 	LOAD   mres16sH
           0CC : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           0CD : 1114;  -- 	STORE  mres16sH
           0CE : 0913;  -- 	LOAD   mres16sL
           0CF : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           0D0 : 49CC;  -- 	AND    LowByte
           0D1 : 5114;  -- 	OR     mres16sH     ; combine high and low words of result
           0D2 : 8800;  -- 	RETURN
           0D3 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           0D4 : 10E9;  -- 	STORE  AtanT
           0D5 : 08E9;  -- 	LOAD   AtanT
           0D6 : 6FFF;  -- 	ADDI   -1
           0D7 : 38DA;  -- 	JPOS   A2_DN        ; not done; continue shifting
           0D8 : 8115;  -- 	CALL   Div16s       ; do the standard division
           0D9 : 8800;  -- 	RETURN
           0DA : 10E9;  -- 	STORE  AtanT
           0DB : 0946;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           0DC : 6001;  -- 	SHIFT  1
           0DD : 5946;  -- 	XOR    d16sN        ; if the sign changed,
           0DE : 30E2;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           0DF : 5946;  -- 	XOR    d16sN        ; get back shifted version
           0E0 : 1146;  -- 	STORE  d16sN
           0E1 : 28D5;  -- 	JUMP   A2_DL
           0E2 : 0947;  -- 	LOAD   d16sD
           0E3 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           0E4 : 1147;  -- 	STORE  d16sD
           0E5 : 28D5;  -- 	JUMP   A2_DL
           0E6 : 0000;  -- AtanX:      DW 0
           0E7 : 0000;  -- AtanY:      DW 0
           0E8 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           0E9 : 0000;  -- AtanT:      DW 0        ; temporary value
           0EA : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           0EB : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           0EC : B800;  -- 	LOADI  0
           0ED : 1111;  -- 	STORE  m16sc        ; clear carry
           0EE : 1114;  -- 	STORE  mres16sH     ; clear result
           0EF : B810;  -- 	LOADI  16           ; load 16 to counter
           0F0 : 1112;  -- 	STORE  mcnt16s      
           0F1 : 0911;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           0F2 : 40F6;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           0F3 : 0914;  -- 	LOAD   mres16sH     ; if a carry, 
           0F4 : 190F;  -- 	ADD    m16sA        ;  add multiplicand to result H
           0F5 : 1114;  -- 	STORE  mres16sH
           0F6 : 0910;  -- 	LOAD   m16sB
           0F7 : 49BA;  -- 	AND    One          ; check bit 0 of multiplier
           0F8 : 1111;  -- 	STORE  m16sc        ; save as next carry
           0F9 : 40FD;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           0FA : 0914;  -- 	LOAD   mres16sH     ; if bit 0 set,
           0FB : 210F;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           0FC : 1114;  -- 	STORE  mres16sH
           0FD : 0910;  -- 	LOAD   m16sB
           0FE : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           0FF : 490E;  -- 	AND    c7FFF        ; clear msb
           100 : 1110;  -- 	STORE  m16sB
           101 : 0914;  -- 	LOAD   mres16sH     ; load result H
           102 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           103 : 5110;  -- 	OR     m16sB
           104 : 1110;  -- 	STORE  m16sB        ; result L now includes carry out from H
           105 : 0914;  -- 	LOAD   mres16sH
           106 : 6011;  -- 	SHIFT  -1
           107 : 1114;  -- 	STORE  mres16sH     ; shift result H >>1
           108 : 0912;  -- 	LOAD   mcnt16s
           109 : 6FFF;  -- 	ADDI   -1           ; check counter
           10A : 38F0;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           10B : 0910;  -- 	LOAD   m16sB
           10C : 1113;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           10D : 8800;  -- 	RETURN              ; Done
           10E : 7FFF;  -- c7FFF: DW &H7FFF
           10F : 0000;  -- m16sA: DW 0 ; multiplicand
           110 : 0000;  -- m16sB: DW 0 ; multipler
           111 : 0000;  -- m16sc: DW 0 ; carry
           112 : 0000;  -- mcnt16s: DW 0 ; counter
           113 : 0000;  -- mres16sL: DW 0 ; result low
           114 : 0000;  -- mres16sH: DW 0 ; result high
           115 : B800;  -- 	LOADI  0
           116 : 114D;  -- 	STORE  dres16sR     ; clear remainder result
           117 : 114A;  -- 	STORE  d16sC1       ; clear carry
           118 : 0946;  -- 	LOAD   d16sN
           119 : 5947;  -- 	XOR    d16sD
           11A : 1148;  -- 	STORE  d16sS        ; sign determination = N XOR D
           11B : B811;  -- 	LOADI  17
           11C : 1149;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           11D : 0947;  -- 	LOAD   d16sD
           11E : 8083;  -- 	CALL   Abs          ; take absolute value of denominator
           11F : 1147;  -- 	STORE  d16sD
           120 : 0946;  -- 	LOAD   d16sN
           121 : 8083;  -- 	CALL   Abs          ; take absolute value of numerator
           122 : 1146;  -- 	STORE  d16sN
           123 : 0946;  -- 	LOAD   d16sN
           124 : 601F;  -- 	SHIFT  -15          ; get msb
           125 : 49BA;  -- 	AND    One          ; only msb (because shift is arithmetic)
           126 : 114B;  -- 	STORE  d16sC2       ; store as carry
           127 : 0946;  -- 	LOAD   d16sN
           128 : 6001;  -- 	SHIFT  1            ; shift <<1
           129 : 514A;  -- 	OR     d16sC1       ; with carry
           12A : 1146;  -- 	STORE  d16sN
           12B : 0949;  -- 	LOAD   d16sT
           12C : 6FFF;  -- 	ADDI   -1           ; decrement counter
           12D : 413D;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           12E : 1149;  -- 	STORE  d16sT
           12F : 094D;  -- 	LOAD   dres16sR
           130 : 6001;  -- 	SHIFT  1            ; shift remainder
           131 : 514B;  -- 	OR     d16sC2       ; with carry from other shift
           132 : 2147;  -- 	SUB    d16sD        ; subtract denominator from remainder
           133 : 3138;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           134 : 114D;  -- 	STORE  dres16sR
           135 : B801;  -- 	LOADI  1
           136 : 114A;  -- 	STORE  d16sC1       ; set carry
           137 : 2923;  -- 	JUMP   Div16s_loop
           138 : 1947;  -- 	ADD    d16sD        ; add denominator back in
           139 : 114D;  -- 	STORE  dres16sR
           13A : B800;  -- 	LOADI  0
           13B : 114A;  -- 	STORE  d16sC1       ; clear carry
           13C : 2923;  -- 	JUMP   Div16s_loop
           13D : 0946;  -- 	LOAD   d16sN
           13E : 114C;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           13F : 0948;  -- 	LOAD   d16sS        ; check the sign indicator
           140 : 3142;  -- 	JNEG   Div16s_neg
           141 : 8800;  -- 	RETURN
           142 : 094C;  -- 	LOAD   dres16sQ     ; need to negate the result
           143 : 8084;  -- 	CALL   Neg
           144 : 114C;  -- 	STORE  dres16sQ
           145 : 8800;  -- 	RETURN	
           146 : 0000;  -- d16sN: DW 0 ; numerator
           147 : 0000;  -- d16sD: DW 0 ; denominator
           148 : 0000;  -- d16sS: DW 0 ; sign value
           149 : 0000;  -- d16sT: DW 0 ; temp counter
           14A : 0000;  -- d16sC1: DW 0 ; carry value
           14B : 0000;  -- d16sC2: DW 0 ; carry value
           14C : 0000;  -- dres16sQ: DW 0 ; quotient result
           14D : 0000;  -- dres16sR: DW 0 ; remainder result
           14E : 0978;  -- 	LOAD   L2X
           14F : 8083;  -- 	CALL   Abs
           150 : 117A;  -- 	STORE  L2T1
           151 : 0979;  -- 	LOAD   L2Y
           152 : 8083;  -- 	CALL   Abs
           153 : 217A;  -- 	SUB    L2T1
           154 : 3170;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           155 : 197A;  -- 	ADD    L2T1
           156 : 110F;  -- 	STORE  m16sa
           157 : B8F6;  -- 	LOADI  246       ; max * 246
           158 : 1110;  -- 	STORE  m16sB
           159 : 80EC;  -- 	CALL   Mult16s
           15A : 0914;  -- 	LOAD   mres16sH
           15B : 6008;  -- 	SHIFT  8
           15C : 117B;  -- 	STORE  L2T2
           15D : 0913;  -- 	LOAD   mres16sL
           15E : 6018;  -- 	SHIFT  -8        ; / 256
           15F : 49CC;  -- 	AND    LowByte
           160 : 517B;  -- 	OR     L2T2
           161 : 117C;  -- 	STORE  L2T3
           162 : 097A;  -- 	LOAD   L2T1
           163 : 110F;  -- 	STORE  m16sa
           164 : B868;  -- 	LOADI  104       ; min * 104
           165 : 1110;  -- 	STORE  m16sB
           166 : 80EC;  -- 	CALL   Mult16s
           167 : 0914;  -- 	LOAD   mres16sH
           168 : 6008;  -- 	SHIFT  8
           169 : 117B;  -- 	STORE  L2T2
           16A : 0913;  -- 	LOAD   mres16sL
           16B : 6018;  -- 	SHIFT  -8        ; / 256
           16C : 49CC;  -- 	AND    LowByte
           16D : 517B;  -- 	OR     L2T2
           16E : 197C;  -- 	ADD    L2T3     ; sum
           16F : 8800;  -- 	RETURN
           170 : 197A;  -- 	ADD    L2T1
           171 : 117B;  -- 	STORE  L2T2
           172 : 097A;  -- 	LOAD   L2T1
           173 : 117C;  -- 	STORE  L2T3
           174 : 097B;  -- 	LOAD   L2T2
           175 : 117A;  -- 	STORE  L2T1
           176 : 097C;  -- 	LOAD   L2T3
           177 : 2956;  -- 	JUMP   CalcDist
           178 : 0000;  -- L2X:  DW 0
           179 : 0000;  -- L2Y:  DW 0
           17A : 0000;  -- L2T1: DW 0
           17B : 0000;  -- L2T2: DW 0
           17C : 0000;  -- L2T3: DW 0
           17D : 9802;  -- 	OUT    TIMER
           17E : 9002;  -- 	IN     TIMER
           17F : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           180 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           181 : 317E;  -- 	JNEG   Wloop
           182 : 8800;  -- 	RETURN
           183 : 819B;  -- 	CALL   GetBattLvl
           184 : 4183;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           185 : 21DB;  -- 	SUB    MinBatt
           186 : 3189;  -- 	JNEG   DeadBatt
           187 : 19DB;  -- 	ADD    MinBatt     ; get original value back
           188 : 8800;  -- 	RETURN
           189 : B820;  -- 	LOADI  &H20
           18A : 980A;  -- 	OUT    BEEP        ; start beep sound
           18B : 819B;  -- 	CALL   GetBattLvl  ; get the battery level
           18C : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           18D : 9805;  -- 	OUT    SSEG2
           18E : 9806;  -- 	OUT    LCD
           18F : 09B9;  -- 	LOAD   Zero
           190 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           191 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           192 : 9807;  -- 	OUT    XLEDS
           193 : 817D;  -- 	CALL   Wait1       ; 1 second
           194 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           195 : 980A;  -- 	OUT    BEEP        ; stop beeping
           196 : 09B9;  -- 	LOAD   Zero
           197 : 9801;  -- 	OUT    LEDS        ; LEDs off
           198 : 9807;  -- 	OUT    XLEDS
           199 : 817D;  -- 	CALL   Wait1       ; 1 second
           19A : 2989;  -- 	JUMP   DeadBatt    ; repeat forever
           19B : 09DD;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           19C : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           19D : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           19E : 81A9;  -- 	CALL   BlockI2C    ; wait for it to finish
           19F : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1A0 : 8800;  -- 	RETURN
           1A1 : 81A9;  -- 	CALL   BlockI2C    ; wait for idle
           1A2 : 09DC;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1A3 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1A4 : 09B9;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1A5 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1A6 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1A7 : 81A9;  -- 	CALL   BlockI2C    ; wait for it to finish
           1A8 : 8800;  -- 	RETURN
           1A9 : 09B9;  -- 	LOAD   Zero
           1AA : 11B7;  -- 	STORE  Temp        ; Used to check for timeout
           1AB : 09B7;  -- 	LOAD   Temp
           1AC : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1AD : 11B7;  -- 	STORE  Temp
           1AE : 41B2;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1AF : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1B0 : 39AB;  -- 	JPOS   BI2CL       ; If not 0, try again
           1B1 : 8800;  -- 	RETURN             ; Else return
           1B2 : 09B9;  -- 	LOAD   Zero
           1B3 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           1B4 : 9804;  -- 	OUT    SSEG1
           1B5 : 9805;  -- 	OUT    SSEG2       ; display error message
           1B6 : 29B2;  -- 	JUMP   I2CError
           1B7 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           1B8 : FFFF;  -- NegOne:   DW -1
           1B9 : 0000;  -- Zero:     DW 0
           1BA : 0001;  -- One:      DW 1
           1BB : 0002;  -- Two:      DW 2
           1BC : 0003;  -- Three:    DW 3
           1BD : 0004;  -- Four:     DW 4
           1BE : 0005;  -- Five:     DW 5
           1BF : 0006;  -- Six:      DW 6
           1C0 : 0007;  -- Seven:    DW 7
           1C1 : 0008;  -- Eight:    DW 8
           1C2 : 0009;  -- Nine:     DW 9
           1C3 : 000A;  -- Ten:      DW 10
           1C4 : 0001;  -- Mask0:    DW &B00000001
           1C5 : 0002;  -- Mask1:    DW &B00000010
           1C6 : 0004;  -- Mask2:    DW &B00000100
           1C7 : 0008;  -- Mask3:    DW &B00001000
           1C8 : 0010;  -- Mask4:    DW &B00010000
           1C9 : 0020;  -- Mask5:    DW &B00100000
           1CA : 0040;  -- Mask6:    DW &B01000000
           1CB : 0080;  -- Mask7:    DW &B10000000
           1CC : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1CD : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1CE : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1CF : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           1D0 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           1D1 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           1D2 : 00B4;  -- Deg180:   DW 180       ; 180
           1D3 : 010E;  -- Deg270:   DW 270       ; 270
           1D4 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           1D5 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           1D6 : FF9C;  -- RSlow:    DW -100
           1D7 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           1D8 : FEA2;  -- RMid:     DW -350
           1D9 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           1DA : FE0C;  -- RFast:    DW -500
           1DB : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           1DC : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           1DD : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           7D0 : 0000;  -- IR_Current_Val:	DW	&H0
           7D1 : 00FF;  -- IR_Power:	DW	&H00FF
           7D2 : 1FE0;  -- IR_1:		DW	&H1FE0
           7D3 : 07F8;  -- IR_Play:	DW	&H07F8
           7D4 : 07F8;  -- IR_5:		DW	&H07F8
           7D5 : 07F8;  -- IR_9:		DW	&H07F8
           7D6 : 01FE;  -- IR_Enter:	DW	&H01FE
           7D7 : 05FA;  -- IR_VolUp:	DW	&H05FA
           7D8 : 07F8;  -- IR_RW:		DW	&H07F8
           7D9 : 17E8;  -- IR_3:		DW	&H17E8
           7DA : 0FF0;  -- IR_7:		DW	&H0FF0
           7DB : 17E8;  -- IR_Pause:	DW	&H17E8
           7DC : 17E8;  -- IR_2:		DW	&H17E8
           7DD : 0FF0;  -- IR_6:		DW	&H0FF0
           7DE : 07F8;  -- IR_0:		DW	&H07F8
           7DF : 07F8;  -- IR_VolDwn:	DW	&H07F8
           7E0 : 07F8;  -- IR_FF:		DW	&H07F8
           7E1 : 17E8;  -- IR_4:		DW	&H17E8
           7E2 : 0FF0;  -- IR_8:		DW	&H0FF0
           7E3 : 0EF1;  -- IR_TV_VCR:	DW	&H0EF1
  END;
