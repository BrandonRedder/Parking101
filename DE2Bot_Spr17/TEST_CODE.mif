-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 287B;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A40;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00A : 8222;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 8204;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 4A4F;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 4A4C;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 4A4C;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 1238;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 5238;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 4A4D;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 0A40;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : B800;  -- 	LOADI  0
           022 : 107E;  -- 	STORE  DVel        ; desired forward velocity
           023 : 90C2;  -- 	IN     THETA
           024 : 107D;  -- 	STORE  DTheta      ; desired heading
           025 : B80A;  -- 	LOADI  10          ; 10ms * 10 = 0.1s rate, or 10Hz.
           026 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           027 : A802;  -- 	SEI    &B0010
           028 : 98C3;  --     OUT    RESETPOS
           029 : B896;  -- 	LOADI 150
           02A : 1239;  --     STORE Increment_Speed
           02B : B85A;  --     LOADI 90
           02C : 123A;  --     STORE Increment_Angle
           02D : 90D0;  --     IN      IR_HI                                           ; get the high word
           02E : 9804;  --     OUT     SSEG1						; display the high word
           02F : 90D1;  --     IN      IR_LO                                           ; get the low word
           030 : 9805;  --     OUT     SSEG2						; display the low word
           031 : 17D0;  --     STORE	IR_Current_Val			                ;Else, store new value and start down tree
           032 : 0FD0;  --     LOAD	IR_Current_Val
           033 : 27E4;  --     SUB     Play_IR
           034 : 4036;  --     JZERO Loop
           035 : 2828;  --     JUMP Main
           036 : 90D0;  -- 	IN      IR_HI                                           ; get the high word
           037 : 9804;  -- 	OUT     SSEG1						; display the high word
           038 : 90D1;  -- 	IN      IR_LO                                           ; get the low word
           039 : 9805;  -- 	OUT     SSEG2						; display the low word
           03A : 17D0;  -- 	STORE	IR_Current_Val			                ;Else, store new value and start down tree
           03B : 80E5;  -- 	Call    Reset_IR					;Reset IR to not read same value twice
           03C : 0FD0;  -- 	LOAD	IR_Current_Val
           03D : 27E5;  --     SUB     Stop_IR
           03E : 4072;  --     JZERO   Die
           03F : 80AB;  --     Call    Move_Forward
           040 : 80B9;  --     Call    Turn_Left
           041 : 2836;  --     JUMP    Loop
           042 : 27D1;  -- 	SUB		IR_Power				;Check if power button (E-Stop)
           043 : 4072;  -- 	JZERO	Die
           044 : 27D2;  -- 	SUB		IR_1
           045 : 0A41;  -- 	LOAD    ONE
           046 : 28EA;  -- 	JUMP    Goto_Spot
           047 : 27D3;  -- 	SUB		IR_Play					;Check if it is pause button (Stop motion)
           048 : 40E0;  -- 	JZERO	Pause_Motion
           049 : 27D4;  -- 	SUB		IR_5
           04A : 0A45;  -- 	LOAD    FIVE
           04B : 28EA;  -- 	JUMP    Goto_Spot
           04C : 27D5;  -- 	SUB		IR_9
           04D : 0A49;  -- 	LOAD    NINE
           04E : 28EA;  -- 	JUMP    Goto_Spot
           04F : 27D6;  -- 	SUB		IR_Enter
           050 : 28F6;  -- 	JUMP    Parallel
           051 : 27D7;  -- 	SUB		IR_VolUp				;Increase the increment in motion and angle
           052 : 40C1;  -- 	JZERO	Increase_Increment
           053 : 27D8;  -- 	SUB		IR_RW					;Do stuff to turn left
           054 : 40B9;  -- 	JZERO	Turn_Left
           055 : 27D9;  -- 	SUB		IR_3
           056 : 0A43;  -- 	LOAD    THREE
           057 : 28EA;  -- 	JUMP    Goto_Spot
           058 : 27DA;  -- 	SUB		IR_7
           059 : 0A47;  -- 	LOAD    SEVEN
           05A : 28EA;  -- 	JUMP    Goto_Spot
           05B : 27DB;  -- 	SUB		IR_Pause				;Do stuff to back up
           05C : 40B2;  -- 	JZERO	Move_Backward
           05D : 27DC;  -- 	SUB		IR_2
           05E : 0A42;  -- 	LOAD    TWO
           05F : 28EA;  -- 	JUMP    Goto_Spot
           060 : 27DD;  -- 	SUB		IR_6
           061 : 0A46;  -- 	LOAD    SIX
           062 : 28EA;  -- 	JUMP    Goto_Spot
           063 : 27DE;  -- 	SUB		IR_0					;Do stuff to go forward
           064 : 40AB;  -- 	JZERO	Move_Forward
           065 : 27DF;  -- 	SUB		IR_VolDwn				;Decrease the increment in motion and angle
           066 : 40CE;  -- 	JZERO	Decrease_Increment
           067 : 27E0;  -- 	SUB		IR_FF					;Do stuff to turn right
           068 : 40BD;  -- 	JZERO	Turn_Right
           069 : 27E1;  -- 	SUB		IR_4
           06A : 0A44;  -- 	LOAD    FOUR
           06B : 28EA;  -- 	JUMP    Goto_Spot
           06C : 27E2;  -- 	SUB		IR_8
           06D : 0A48;  -- 	LOAD    EIGHT
           06E : 28EA;  -- 	JUMP    Goto_Spot
           06F : 27E3;  -- 	SUB		IR_TV_VCR
           070 : 28F5;  -- 	JUMP    Perpendicular
           071 : 2828;  -- 	JUMP	Main					        ;Match not found, return to begining
           072 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           073 : 0A40;  -- 	LOAD   Zero        ; Stop everything.
           074 : 9883;  -- 	OUT    LVELCMD
           075 : 988B;  -- 	OUT    RVELCMD
           076 : 98B2;  -- 	OUT    SONAREN
           077 : 087A;  -- 	LOAD   DEAD        ; An indication that we are dead
           078 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the LEDs
           079 : 2879;  -- 	JUMP   Forever     ; Do this forever.
           07A : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           07B : 807F;  -- 	CALL   ControlMovement
           07C : B000;  -- 	RETI   ; return from ISR
           07D : 0000;  -- DTheta:    DW 0
           07E : 0000;  -- DVel:      DW 0
           07F : B832;  -- 	LOADI  50          ; used later to get a +/- constant
           080 : 10AA;  -- 	STORE  MaxVal
           081 : 8097;  -- 	CALL   GetThetaErr ; get the heading error
           082 : 6002;  -- 	SHIFT  2
           083 : 1096;  -- 	STORE  CMAErr      ; hold temporarily
           084 : 6003;  -- 	SHIFT  3           ; multiply by another 4
           085 : 809E;  -- 	CALL   CapValue    ; get a +/- max of 50
           086 : 1896;  -- 	ADD    CMAErr
           087 : 1096;  -- 	STORE  CMAErr
           088 : B9FE;  -- 	LOADI  510
           089 : 10AA;  -- 	STORE  MaxVal
           08A : 087E;  -- 	LOAD   DVel
           08B : 809E;  -- 	CALL   CapValue    ; ensure velocity is valid
           08C : 107E;  -- 	STORE  DVel        ; overwrite any invalid input
           08D : 1896;  -- 	ADD    CMAErr
           08E : 809E;  -- 	CALL   CapValue    ; ensure velocity is valid
           08F : 988B;  -- 	OUT    RVELCMD
           090 : 0896;  -- 	LOAD   CMAErr
           091 : 80FF;  -- 	CALL   Neg         ; left wheel gets negative differential
           092 : 187E;  -- 	ADD    DVel
           093 : 809E;  -- 	CALL   CapValue
           094 : 9883;  -- 	OUT    LVELCMD
           095 : 8800;  -- 	RETURN
           096 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           097 : 90C2;  -- 	IN     THETA
           098 : 207D;  -- 	SUB    DTheta      ; actual - desired angle
           099 : 80FF;  -- 	CALL   Neg         ; desired - actual angle
           09A : 68B4;  -- 	ADDI   180
           09B : 80F8;  -- 	CALL   Mod360
           09C : 6F4C;  -- 	ADDI   -180
           09D : 8800;  -- 	RETURN
           09E : 20AA;  -- 	SUB     MaxVal
           09F : 38A5;  -- 	JPOS    CapVelHigh
           0A0 : 18AA;  -- 	ADD     MaxVal
           0A1 : 18AA;  -- 	ADD     MaxVal
           0A2 : 30A7;  -- 	JNEG    CapVelLow
           0A3 : 20AA;  -- 	SUB     MaxVal
           0A4 : 8800;  -- 	RETURN
           0A5 : 08AA;  -- 	LOAD    MaxVal
           0A6 : 8800;  -- 	RETURN
           0A7 : 08AA;  -- 	LOAD    MaxVal
           0A8 : 80FF;  -- 	CALL    Neg
           0A9 : 8800;  -- 	RETURN
           0AA : 01FE;  -- 	MaxVal: DW 510
           0AB : B800;  -- 	LOADI	0
           0AC : 1A39;  -- 	ADD		Increment_Speed
           0AD : 107E;  -- 	STORE	DVel
           0AE : 81FE;  -- 	Call	Wait2
           0AF : B800;  -- 	LOADI	0
           0B0 : 107E;  -- 	STORE	DVel
           0B1 : 8800;  -- 	RETURN
           0B2 : B800;  -- 	LOADI	0
           0B3 : 2239;  -- 	SUB		Increment_Speed
           0B4 : 107E;  -- 	STORE	DVel
           0B5 : 81FE;  -- 	Call	Wait2
           0B6 : B800;  -- 	LOADI	0
           0B7 : 107E;  -- 	STORE	DVel
           0B8 : 8800;  -- 	RETURN
           0B9 : 90C2;  -- 	IN    	THETA
           0BA : 1A3A;  -- 	ADD		Increment_Angle
           0BB : 107D;  -- 	STORE 	DTheta
           0BC : 2828;  -- 	JUMP 	Main
           0BD : 90C2;  -- 	IN    	THETA
           0BE : 223A;  -- 	SUB		Increment_Angle
           0BF : 107D;  -- 	STORE 	DTheta
           0C0 : 2828;  -- 	JUMP	Main
           0C1 : 0A39;  -- 	LOAD	Increment_Speed
           0C2 : 40DB;  -- 	JZERO	Fix_Increment
           0C3 : 30DB;  -- 	JNEG	Fix_Increment
           0C4 : 6814;  -- 	ADDI	20
           0C5 : 1239;  -- 	STORE	Increment_Speed
           0C6 : 9804;  -- 	OUT		SSEG1
           0C7 : 0A3A;  -- 	LOAD	Increment_Angle
           0C8 : 40DB;  -- 	JZERO	Fix_Increment
           0C9 : 30DB;  -- 	JNEG	Fix_Increment
           0CA : 680F;  -- 	ADDI	15
           0CB : 123A;  -- 	STORE	Increment_Angle
           0CC : 9805;  -- 	OUT		SSEG2
           0CD : 2828;  -- 	JUMP	Main
           0CE : 0A39;  -- 	LOAD	Increment_Speed
           0CF : 40DB;  -- 	JZERO	Fix_Increment
           0D0 : 30DB;  -- 	JNEG	Fix_Increment
           0D1 : 6FEC;  -- 	ADDI	-20
           0D2 : 1239;  -- 	STORE	Increment_Speed
           0D3 : 9804;  -- 	OUT		SSEG1
           0D4 : 0A3A;  -- 	LOAD	Increment_Angle
           0D5 : 40DB;  -- 	JZERO	Fix_Increment
           0D6 : 30DB;  -- 	JNEG	Fix_Increment
           0D7 : 6FF1;  -- 	ADDI	-15
           0D8 : 123A;  -- 	STORE	Increment_Angle
           0D9 : 9805;  -- 	OUT		SSEG2
           0DA : 2828;  -- 	JUMP	Main
           0DB : B83C;  -- 	LOADI	60
           0DC : 1239;  -- 	STORE 	Increment_Speed
           0DD : B80F;  -- 	LOADI	15
           0DE : 123A;  -- 	STORE	Increment_Angle
           0DF : 2828;  -- 	JUMP 	Main
           0E0 : 0A40;  -- 	LOAD	Zero
           0E1 : 107E;  -- 	STORE	DVel
           0E2 : 90C2;  -- 	IN		THETA
           0E3 : 107D;  -- 	STORE	DTHETA
           0E4 : 2828;  -- 	JUMP	Main
           0E5 : B800;  -- 	LOADI	0
           0E6 : 98D0;  -- 	OUT     IR_HI
           0E7 : B800;  -- 	LOADI	0
           0E8 : 98D1;  -- 	OUT     IR_LO
           0E9 : 8800;  -- 	RETURN
           0EA : 123B;  -- 	STORE   Spot						;Save the target spot
           0EB : 80F4;  -- 	CALL	Goto_Auto_Init_Pos				;Initial position in front of parking spot 9
           0EC : 0A49;  -- 	LOAD	NINE
           0ED : 223B;  -- 	SUB     Spot						;Calculate the spot offset relative to spot 9
           0EE : 118A;  -- 	STORE   m16sA						;Multiply spot offset with the spot width
           0EF : 0A3C;  -- 	LOAD    Spot_Width
           0F0 : 118B;  -- 	STORE   m16sB
           0F1 : 8167;  -- 	CALL    Mult16s
           0F2 : 098E;  -- 	LOAD 	mres16sL
           0F3 : 28F5;  -- 	JUMP    Perpendicular
           0F4 : 8800;  -- 	RETURN							;Goes to an initial position in front of spot 9
           0F5 : 2828;  -- 	JUMP Main
           0F6 : 2828;  -- 	JUMP Main
           0F7 : 8800;  -- 	RETURN
           0F8 : 30FB;  -- 	JNEG   M360N
           0F9 : 6E98;  -- 	ADDI   -360
           0FA : 28F8;  -- 	JUMP   Mod360
           0FB : 6968;  -- 	ADDI   360
           0FC : 30FB;  -- 	JNEG   M360N
           0FD : 8800;  -- 	RETURN
           0FE : 3901;  -- 	JPOS   Abs_r
           0FF : 5A3F;  -- 	XOR    NegOne       ; Flip all bits
           100 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           101 : 8800;  -- 	RETURN
           102 : 0962;  -- 	LOAD   AtanY
           103 : 80FE;  -- 	CALL   Abs          ; abs(y)
           104 : 1164;  -- 	STORE  AtanT
           105 : 0961;  -- 	LOAD   AtanX        ; abs(x)
           106 : 80FE;  -- 	CALL   Abs
           107 : 2164;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           108 : 3113;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           109 : 0961;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           10A : 3110;  -- 	JNEG   A2_R3
           10B : 8122;  -- 	CALL   A2_calc      ; Octants 1, 8
           10C : 310E;  -- 	JNEG   A2_R1n
           10D : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           10E : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           10F : 8800;  -- 	RETURN
           110 : 8122;  -- 	CALL   A2_calc      ; Octants 4, 5
           111 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           112 : 8800;  -- 	RETURN
           113 : 0962;  -- 	LOAD   AtanY        ; Swap input arguments
           114 : 1164;  -- 	STORE  AtanT
           115 : 0961;  -- 	LOAD   AtanX
           116 : 1162;  -- 	STORE  AtanY
           117 : 0964;  -- 	LOAD   AtanT
           118 : 1161;  -- 	STORE  AtanX
           119 : 391E;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           11A : 8122;  -- 	CALL   A2_calc      ; else octants 6, 7
           11B : 80FF;  -- 	CALL   Neg          ; Negatge the number
           11C : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           11D : 8800;  -- 	RETURN
           11E : 8122;  -- 	CALL   A2_calc      ; Octants 2, 3
           11F : 80FF;  -- 	CALL   Neg          ; negate the angle
           120 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           121 : 8800;  -- 	RETURN
           122 : 0962;  -- 	LOAD   AtanY
           123 : 11C1;  -- 	STORE  d16sN        ; Y in numerator
           124 : 0961;  -- 	LOAD   AtanX
           125 : 11C2;  -- 	STORE  d16sD        ; X in denominator
           126 : 814E;  -- 	CALL   A2_div       ; divide
           127 : 09C7;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           128 : 1163;  -- 	STORE  AtanRatio
           129 : 118A;  -- 	STORE  m16sA
           12A : 118B;  -- 	STORE  m16sB
           12B : 8145;  -- 	CALL   A2_mult      ; X^2
           12C : 118A;  -- 	STORE  m16sA
           12D : 0965;  -- 	LOAD   A2c
           12E : 118B;  -- 	STORE  m16sB
           12F : 8145;  -- 	CALL   A2_mult
           130 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           131 : 11C2;  -- 	STORE  d16sD
           132 : 0963;  -- 	LOAD   AtanRatio
           133 : 11C1;  -- 	STORE  d16sN        ; Ratio in numerator
           134 : 814E;  -- 	CALL   A2_div       ; divide
           135 : 09C7;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           136 : 118A;  -- 	STORE  m16sA        ; <= result in radians
           137 : 0966;  -- 	LOAD   A2cd         ; degree conversion factor
           138 : 118B;  -- 	STORE  m16sB
           139 : 8145;  -- 	CALL   A2_mult      ; convert to degrees
           13A : 1164;  -- 	STORE  AtanT
           13B : 6017;  -- 	SHIFT  -7           ; check 7th bit
           13C : 4A41;  -- 	AND    One
           13D : 4142;  -- 	JZERO  A2_rdwn      ; round down
           13E : 0964;  -- 	LOAD   AtanT
           13F : 6018;  -- 	SHIFT  -8
           140 : 6801;  -- 	ADDI   1            ; round up
           141 : 8800;  -- 	RETURN
           142 : 0964;  -- 	LOAD   AtanT
           143 : 6018;  -- 	SHIFT  -8           ; round down
           144 : 8800;  -- 	RETURN
           145 : 8167;  -- 	CALL   Mult16s
           146 : 098F;  -- 	LOAD   mres16sH
           147 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           148 : 118F;  -- 	STORE  mres16sH
           149 : 098E;  -- 	LOAD   mres16sL
           14A : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           14B : 4A53;  -- 	AND    LowByte
           14C : 518F;  -- 	OR     mres16sH     ; combine high and low words of result
           14D : 8800;  -- 	RETURN
           14E : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           14F : 1164;  -- 	STORE  AtanT
           150 : 0964;  -- 	LOAD   AtanT
           151 : 6FFF;  -- 	ADDI   -1
           152 : 3955;  -- 	JPOS   A2_DN        ; not done; continue shifting
           153 : 8190;  -- 	CALL   Div16s       ; do the standard division
           154 : 8800;  -- 	RETURN
           155 : 1164;  -- 	STORE  AtanT
           156 : 09C1;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           157 : 6001;  -- 	SHIFT  1
           158 : 59C1;  -- 	XOR    d16sN        ; if the sign changed,
           159 : 315D;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           15A : 59C1;  -- 	XOR    d16sN        ; get back shifted version
           15B : 11C1;  -- 	STORE  d16sN
           15C : 2950;  -- 	JUMP   A2_DL
           15D : 09C2;  -- 	LOAD   d16sD
           15E : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           15F : 11C2;  -- 	STORE  d16sD
           160 : 2950;  -- 	JUMP   A2_DL
           161 : 0000;  -- AtanX:      DW 0
           162 : 0000;  -- AtanY:      DW 0
           163 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           164 : 0000;  -- AtanT:      DW 0        ; temporary value
           165 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           166 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           167 : B800;  -- 	LOADI  0
           168 : 118C;  -- 	STORE  m16sc        ; clear carry
           169 : 118F;  -- 	STORE  mres16sH     ; clear result
           16A : B810;  -- 	LOADI  16           ; load 16 to counter
           16B : 118D;  -- 	STORE  mcnt16s
           16C : 098C;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           16D : 4171;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           16E : 098F;  -- 	LOAD   mres16sH     ; if a carry,
           16F : 198A;  -- 	ADD    m16sA        ;  add multiplicand to result H
           170 : 118F;  -- 	STORE  mres16sH
           171 : 098B;  -- 	LOAD   m16sB
           172 : 4A41;  -- 	AND    One          ; check bit 0 of multiplier
           173 : 118C;  -- 	STORE  m16sc        ; save as next carry
           174 : 4178;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           175 : 098F;  -- 	LOAD   mres16sH     ; if bit 0 set,
           176 : 218A;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           177 : 118F;  -- 	STORE  mres16sH
           178 : 098B;  -- 	LOAD   m16sB
           179 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           17A : 4989;  -- 	AND    c7FFF        ; clear msb
           17B : 118B;  -- 	STORE  m16sB
           17C : 098F;  -- 	LOAD   mres16sH     ; load result H
           17D : 600F;  -- 	SHIFT  15           ; move lsb to msb
           17E : 518B;  -- 	OR     m16sB
           17F : 118B;  -- 	STORE  m16sB        ; result L now includes carry out from H
           180 : 098F;  -- 	LOAD   mres16sH
           181 : 6011;  -- 	SHIFT  -1
           182 : 118F;  -- 	STORE  mres16sH     ; shift result H >>1
           183 : 098D;  -- 	LOAD   mcnt16s
           184 : 6FFF;  -- 	ADDI   -1           ; check counter
           185 : 396B;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           186 : 098B;  -- 	LOAD   m16sB
           187 : 118E;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           188 : 8800;  -- 	RETURN              ; Done
           189 : 7FFF;  -- c7FFF: DW &H7FFF
           18A : 0000;  -- m16sA: DW 0 ; multiplicand
           18B : 0000;  -- m16sB: DW 0 ; multipler
           18C : 0000;  -- m16sc: DW 0 ; carry
           18D : 0000;  -- mcnt16s: DW 0 ; counter
           18E : 0000;  -- mres16sL: DW 0 ; result low
           18F : 0000;  -- mres16sH: DW 0 ; result high
           190 : B800;  -- 	LOADI  0
           191 : 11C8;  -- 	STORE  dres16sR     ; clear remainder result
           192 : 11C5;  -- 	STORE  d16sC1       ; clear carry
           193 : 09C1;  -- 	LOAD   d16sN
           194 : 59C2;  -- 	XOR    d16sD
           195 : 11C3;  -- 	STORE  d16sS        ; sign determination = N XOR D
           196 : B811;  -- 	LOADI  17
           197 : 11C4;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           198 : 09C2;  -- 	LOAD   d16sD
           199 : 80FE;  -- 	CALL   Abs          ; take absolute value of denominator
           19A : 11C2;  -- 	STORE  d16sD
           19B : 09C1;  -- 	LOAD   d16sN
           19C : 80FE;  -- 	CALL   Abs          ; take absolute value of numerator
           19D : 11C1;  -- 	STORE  d16sN
           19E : 09C1;  -- 	LOAD   d16sN
           19F : 601F;  -- 	SHIFT  -15          ; get msb
           1A0 : 4A41;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1A1 : 11C6;  -- 	STORE  d16sC2       ; store as carry
           1A2 : 09C1;  -- 	LOAD   d16sN
           1A3 : 6001;  -- 	SHIFT  1            ; shift <<1
           1A4 : 51C5;  -- 	OR     d16sC1       ; with carry
           1A5 : 11C1;  -- 	STORE  d16sN
           1A6 : 09C4;  -- 	LOAD   d16sT
           1A7 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1A8 : 41B8;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1A9 : 11C4;  -- 	STORE  d16sT
           1AA : 09C8;  -- 	LOAD   dres16sR
           1AB : 6001;  -- 	SHIFT  1            ; shift remainder
           1AC : 51C6;  -- 	OR     d16sC2       ; with carry from other shift
           1AD : 21C2;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1AE : 31B3;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1AF : 11C8;  -- 	STORE  dres16sR
           1B0 : B801;  -- 	LOADI  1
           1B1 : 11C5;  -- 	STORE  d16sC1       ; set carry
           1B2 : 299E;  -- 	JUMP   Div16s_loop
           1B3 : 19C2;  -- 	ADD    d16sD        ; add denominator back in
           1B4 : 11C8;  -- 	STORE  dres16sR
           1B5 : B800;  -- 	LOADI  0
           1B6 : 11C5;  -- 	STORE  d16sC1       ; clear carry
           1B7 : 299E;  -- 	JUMP   Div16s_loop
           1B8 : 09C1;  -- 	LOAD   d16sN
           1B9 : 11C7;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1BA : 09C3;  -- 	LOAD   d16sS        ; check the sign indicator
           1BB : 31BD;  -- 	JNEG   Div16s_neg
           1BC : 8800;  -- 	RETURN
           1BD : 09C7;  -- 	LOAD   dres16sQ     ; need to negate the result
           1BE : 80FF;  -- 	CALL   Neg
           1BF : 11C7;  -- 	STORE  dres16sQ
           1C0 : 8800;  -- 	RETURN
           1C1 : 0000;  -- d16sN: DW 0 ; numerator
           1C2 : 0000;  -- d16sD: DW 0 ; denominator
           1C3 : 0000;  -- d16sS: DW 0 ; sign value
           1C4 : 0000;  -- d16sT: DW 0 ; temp counter
           1C5 : 0000;  -- d16sC1: DW 0 ; carry value
           1C6 : 0000;  -- d16sC2: DW 0 ; carry value
           1C7 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1C8 : 0000;  -- dres16sR: DW 0 ; remainder result
           1C9 : 09F3;  -- 	LOAD   L2X
           1CA : 80FE;  -- 	CALL   Abs
           1CB : 11F5;  -- 	STORE  L2T1
           1CC : 09F4;  -- 	LOAD   L2Y
           1CD : 80FE;  -- 	CALL   Abs
           1CE : 21F5;  -- 	SUB    L2T1
           1CF : 31EB;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1D0 : 19F5;  -- 	ADD    L2T1
           1D1 : 118A;  -- 	STORE  m16sa
           1D2 : B8F6;  -- 	LOADI  246       ; max * 246
           1D3 : 118B;  -- 	STORE  m16sB
           1D4 : 8167;  -- 	CALL   Mult16s
           1D5 : 098F;  -- 	LOAD   mres16sH
           1D6 : 6008;  -- 	SHIFT  8
           1D7 : 11F6;  -- 	STORE  L2T2
           1D8 : 098E;  -- 	LOAD   mres16sL
           1D9 : 6018;  -- 	SHIFT  -8        ; / 256
           1DA : 4A53;  -- 	AND    LowByte
           1DB : 51F6;  -- 	OR     L2T2
           1DC : 11F7;  -- 	STORE  L2T3
           1DD : 09F5;  -- 	LOAD   L2T1
           1DE : 118A;  -- 	STORE  m16sa
           1DF : B868;  -- 	LOADI  104       ; min * 104
           1E0 : 118B;  -- 	STORE  m16sB
           1E1 : 8167;  -- 	CALL   Mult16s
           1E2 : 098F;  -- 	LOAD   mres16sH
           1E3 : 6008;  -- 	SHIFT  8
           1E4 : 11F6;  -- 	STORE  L2T2
           1E5 : 098E;  -- 	LOAD   mres16sL
           1E6 : 6018;  -- 	SHIFT  -8        ; / 256
           1E7 : 4A53;  -- 	AND    LowByte
           1E8 : 51F6;  -- 	OR     L2T2
           1E9 : 19F7;  -- 	ADD    L2T3     ; sum
           1EA : 8800;  -- 	RETURN
           1EB : 19F5;  -- 	ADD    L2T1
           1EC : 11F6;  -- 	STORE  L2T2
           1ED : 09F5;  -- 	LOAD   L2T1
           1EE : 11F7;  -- 	STORE  L2T3
           1EF : 09F6;  -- 	LOAD   L2T2
           1F0 : 11F5;  -- 	STORE  L2T1
           1F1 : 09F7;  -- 	LOAD   L2T3
           1F2 : 29D1;  -- 	JUMP   CalcDist
           1F3 : 0000;  -- L2X:  DW 0
           1F4 : 0000;  -- L2Y:  DW 0
           1F5 : 0000;  -- L2T1: DW 0
           1F6 : 0000;  -- L2T2: DW 0
           1F7 : 0000;  -- L2T3: DW 0
           1F8 : 9802;  -- 	OUT    TIMER
           1F9 : 9002;  -- 	IN     TIMER
           1FA : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1FB : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1FC : 31F9;  -- 	JNEG   Wloop
           1FD : 8800;  -- 	RETURN
           1FE : 9802;  -- 	OUT    TIMER
           1FF : 9002;  -- 	IN     TIMER
           200 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           201 : 6FEC;  -- 	ADDI   -20         ; 2 second at 10Hz.
           202 : 31FF;  -- 	JNEG   Wloop2
           203 : 8800;  -- 	RETURN
           204 : 821C;  -- 	CALL   GetBattLvl
           205 : 4204;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           206 : 2262;  -- 	SUB    MinBatt
           207 : 320A;  -- 	JNEG   DeadBatt
           208 : 1A62;  -- 	ADD    MinBatt     ; get original value back
           209 : 8800;  -- 	RETURN
           20A : B820;  -- 	LOADI  &H20
           20B : 980A;  -- 	OUT    BEEP        ; start beep sound
           20C : 821C;  -- 	CALL   GetBattLvl  ; get the battery level
           20D : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           20E : 9805;  -- 	OUT    SSEG2
           20F : 9806;  -- 	OUT    LCD
           210 : 0A40;  -- 	LOAD   Zero
           211 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           212 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           213 : 9807;  -- 	OUT    XLEDS
           214 : 81F8;  -- 	CALL   Wait1       ; 1 second
           215 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           216 : 980A;  -- 	OUT    BEEP        ; stop beeping
           217 : 0A40;  -- 	LOAD   Zero
           218 : 9801;  -- 	OUT    LEDS        ; LEDs off
           219 : 9807;  -- 	OUT    XLEDS
           21A : 81F8;  -- 	CALL   Wait1       ; 1 second
           21B : 2A0A;  -- 	JUMP   DeadBatt    ; repeat forever
           21C : 0A64;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           21D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           21E : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           21F : 822A;  -- 	CALL   BlockI2C    ; wait for it to finish
           220 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           221 : 8800;  -- 	RETURN
           222 : 822A;  -- 	CALL   BlockI2C    ; wait for idle
           223 : 0A63;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           224 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           225 : 0A40;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           226 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           227 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           228 : 822A;  -- 	CALL   BlockI2C    ; wait for it to finish
           229 : 8800;  -- 	RETURN
           22A : 0A40;  -- 	LOAD   Zero
           22B : 1238;  -- 	STORE  Temp        ; Used to check for timeout
           22C : 0A38;  -- 	LOAD   Temp
           22D : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           22E : 1238;  -- 	STORE  Temp
           22F : 4233;  -- 	JZERO  I2CError    ; Timeout occurred; error
           230 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           231 : 3A2C;  -- 	JPOS   BI2CL       ; If not 0, try again
           232 : 8800;  -- 	RETURN             ; Else return
           233 : 0A40;  -- 	LOAD   Zero
           234 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           235 : 9804;  -- 	OUT    SSEG1
           236 : 9805;  -- 	OUT    SSEG2       ; display error message
           237 : 2A33;  -- 	JUMP   I2CError
           238 : 0000;  -- Temp:     		DW 	0  ;"Temp" is not a great name, but can be useful
           239 : 000A;  -- Increment_Speed:	DW	10 ;Value used to make adjustments to position
           23A : 0005;  -- Increment_Angle:	DW	5  ;Value used to make adjustments to angle
           23B : 0000;  -- Spot:                   DW      0  ;Target spot
           23C : 0000;  -- Spot_Width:		DW	0  ;Width of each spot
           23D : 0000;  -- Auto_Perp_Distance:	DW	0  ;Distance that will bring the robot to the position for perpendicular parking in auto parking
           23E : 0000;  -- Perpendicular_Distance: DW      0  ;Distance that will park the robot from a specified position
           23F : FFFF;  -- NegOne:   DW -1
           240 : 0000;  -- Zero:     DW 0
           241 : 0001;  -- One:      DW 1
           242 : 0002;  -- Two:      DW 2
           243 : 0003;  -- Three:    DW 3
           244 : 0004;  -- Four:     DW 4
           245 : 0005;  -- Five:     DW 5
           246 : 0006;  -- Six:      DW 6
           247 : 0007;  -- Seven:    DW 7
           248 : 0008;  -- Eight:    DW 8
           249 : 0009;  -- Nine:     DW 9
           24A : 000A;  -- Ten:      DW 10
           24B : 0001;  -- Mask0:    DW &B00000001
           24C : 0002;  -- Mask1:    DW &B00000010
           24D : 0004;  -- Mask2:    DW &B00000100
           24E : 0008;  -- Mask3:    DW &B00001000
           24F : 0010;  -- Mask4:    DW &B00010000
           250 : 0020;  -- Mask5:    DW &B00100000
           251 : 0040;  -- Mask6:    DW &B01000000
           252 : 0080;  -- Mask7:    DW &B10000000
           253 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           254 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           255 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           256 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           257 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           258 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           259 : 00B4;  -- Deg180:   DW 180       ; 180
           25A : 010E;  -- Deg270:   DW 270       ; 270
           25B : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           25C : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           25D : FF9C;  -- RSlow:    DW -100
           25E : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           25F : FEA2;  -- RMid:     DW -350
           260 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           261 : FE0C;  -- RFast:    DW -500
           262 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           263 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           264 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           7D0 : 0000;  -- IR_Current_Val:	DW	&H0
           7D1 : 00FF;  -- IR_Power:	DW	&H00FF
           7D2 : 1FE0;  -- IR_1:		DW	&H1FE0
           7D3 : 07F8;  -- IR_Play:	DW	&H07F8
           7D4 : 07F8;  -- IR_5:		DW	&H07F8
           7D5 : 07F8;  -- IR_9:		DW	&H07F8
           7D6 : 01FE;  -- IR_Enter:	DW	&H01FE
           7D7 : 05FA;  -- IR_VolUp:	DW	&H05FA
           7D8 : 07F8;  -- IR_RW:		DW	&H07F8
           7D9 : 17E8;  -- IR_3:		DW	&H17E8
           7DA : 0FF0;  -- IR_7:		DW	&H0FF0
           7DB : 17E8;  -- IR_Pause:	DW	&H17E8
           7DC : 17E8;  -- IR_2:		DW	&H17E8
           7DD : 0FF0;  -- IR_6:		DW	&H0FF0
           7DE : 07F8;  -- IR_0:		DW	&H07F8
           7DF : 07F8;  -- IR_VolDwn:	DW	&H07F8
           7E0 : 07F8;  -- IR_FF:		DW	&H07F8
           7E1 : 17E8;  -- IR_4:		DW	&H17E8
           7E2 : 0FF0;  -- IR_8:		DW	&H0FF0
           7E3 : 0EF1;  -- IR_TV_VCR:	DW	&H0EF1
           7E4 : 28D7;  -- Play_IR:     DW  &H28D7
           7E5 : 00FF;  -- Stop_IR:    DW  &H00FF
  END;
